import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import DashboardFooter from './DashboardFooter';

describe('DashboardFooter', () => {
  describe('Rendering', () => {
    it('renders footer with default version information', () => {
      render(<DashboardFooter />);
      
      expect(screen.getByRole('contentinfo')).toBeInTheDocument();
      expect(screen.getByText(/Generated By Perf Report 0.0.1/)).toBeInTheDocument();
      expect(screen.getByText(/Test Executed By Gatling Unknown/)).toBeInTheDocument();
      expect(screen.getByText(/Parser Unknown/)).toBeInTheDocument();
    });

    it('renders footer with custom Gatling version', () => {
      render(<DashboardFooter gatlingVersion="3.9.5" />);
      
      expect(screen.getByText(/Test Executed By Gatling 3.9.5/)).toBeInTheDocument();
    });

    it('renders footer with custom parser version', () => {
      render(<DashboardFooter parserVersion="1.2.3" />);
      
      expect(screen.getByText(/Parser 1.2.3/)).toBeInTheDocument();
    });

    it('renders footer with both custom versions', () => {
      render(<DashboardFooter gatlingVersion="3.9.5" parserVersion="1.2.3" />);
      
      expect(screen.getByText(/Test Executed By Gatling 3.9.5/)).toBeInTheDocument();
      expect(screen.getByText(/Parser 1.2.3/)).toBeInTheDocument();
    });

    it('applies default CSS classes', () => {
      render(<DashboardFooter />);
      
      const footer = screen.getByRole('contentinfo');
      expect(footer).toHaveClass('mt-12', 'text-center');
    });

    it('applies custom CSS classes', () => {
      render(<DashboardFooter className="custom-footer bg-gray-100" />);
      
      const footer = screen.getByRole('contentinfo');
      expect(footer).toHaveClass('mt-12', 'text-center', 'custom-footer', 'bg-gray-100');
    });

    it('renders text with correct styling classes', () => {
      render(<DashboardFooter />);
      
      const text = screen.getByText(/Generated By Perf Report 0.0.1/);
      expect(text).toHaveClass('text-sm', 'text-slate-500');
    });
  });

  describe('Content Validation', () => {
    it('displays complete version information string', () => {
      render(<DashboardFooter gatlingVersion="3.9.5" parserVersion="1.2.3" />);
      
      expect(screen.getByText(
        'Generated By Perf Report 0.0.1 â€¢ Test Executed By Gatling 3.9.5 â€¢ Parser 1.2.3'
      )).toBeInTheDocument();
    });

    it('handles empty string versions', () => {
      render(<DashboardFooter gatlingVersion="" parserVersion="" />);
      
      expect(screen.getByText(/Test Executed By Gatling/)).toBeInTheDocument();
      expect(screen.getByText(/Parser/)).toBeInTheDocument();
    });

    it('handles undefined versions gracefully', () => {
      render(<DashboardFooter gatlingVersion={undefined} parserVersion={undefined} />);
      
      expect(screen.getByText(/Test Executed By Gatling Unknown/)).toBeInTheDocument();
      expect(screen.getByText(/Parser Unknown/)).toBeInTheDocument();
    });
  });

  describe('Accessibility', () => {
    it('uses semantic footer element', () => {
      render(<DashboardFooter />);
      
      expect(screen.getByRole('contentinfo')).toBeInTheDocument();
    });

    it('has accessible text content', () => {
      render(<DashboardFooter gatlingVersion="3.9.5" parserVersion="1.2.3" />);
      
      const footer = screen.getByRole('contentinfo');
      expect(footer).toHaveTextContent('Generated By Perf Report 0.0.1 â€¢ Test Executed By Gatling 3.9.5 â€¢ Parser 1.2.3');
    });
  });

  describe('Props Interface', () => {
    it('accepts all optional props', () => {
      const props = {
        gatlingVersion: '3.9.5',
        parserVersion: '1.2.3',
        className: 'test-class'
      };

      expect(() => render(<DashboardFooter {...props} />)).not.toThrow();
    });

    it('works without any props', () => {
      expect(() => render(<DashboardFooter />)).not.toThrow();
    });
  });
});
